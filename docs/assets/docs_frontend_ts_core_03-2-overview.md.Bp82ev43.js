import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.ko2zIC2c.js";const c=JSON.parse('{"title":"TypeScript 类型总览","description":"TypeScript类型总览","frontmatter":{"title":"TypeScript 类型总览","description":"TypeScript类型总览"},"headers":[],"relativePath":"docs/frontend/ts/core/03-2-overview.md","filePath":"docs/frontend/ts/core/03-2-overview.md","lastUpdated":1753693356000}'),l={name:"docs/frontend/ts/core/03-2-overview.md"};function t(h,s,p,k,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="类型总览" tabindex="-1">类型总览 <a class="header-anchor" href="#类型总览" aria-label="Permalink to &quot;类型总览&quot;">​</a></h1><h2 id="js-中的数据类型" tabindex="-1">JS 中的数据类型 <a class="header-anchor" href="#js-中的数据类型" aria-label="Permalink to &quot;JS 中的数据类型&quot;">​</a></h2><ul><li><code>string</code></li><li><code>number</code></li><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>bigint</code></li><li><code>symbol</code></li><li><code>object</code><ul><li><code>Array</code></li><li><code>Function</code></li><li><code>Date</code></li><li><code>Error</code></li><li>...</li></ul></li></ul><h2 id="ts-中的数据类型" tabindex="-1">TS 中的数据类型 <a class="header-anchor" href="#ts-中的数据类型" aria-label="Permalink to &quot;TS 中的数据类型&quot;">​</a></h2><ul><li><code>JS</code>所有数据类型</li><li><code>6</code>个新类型: <ul><li><code>any</code></li><li><code>unknown</code></li><li><code>never</code></li><li><code>void</code></li><li><code>tuple</code></li><li><code>enum</code></li></ul></li><li>两个用于自定义类型的方式: <ul><li><code>type</code></li><li><code>interface</code></li></ul></li></ul><h2 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h2><blockquote><p>在<code>JS</code>中的这些内置构造函数: <code>Number</code>, <code>String</code>, <code>Boolean</code>, 它们用于创建对应的包装对象, 在日常开发中<strong>很少使用</strong> 在<code>TS</code>中也是同理, 所以在<code>TS</code>中进行类型声明时, 通常都是小写的<code>number</code>, <code>string</code>, <code>boolean</code></p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 官方推荐写法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Halo&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// strA = new String(&quot;World&quot;)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 不能将类型“String”分配给类型“string”。 “string”是基元，但“String”是包装器对象。如可能首选使用“string”</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Halo&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strA) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strB) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// object</span></span></code></pre></div><h2 id="原始类型和包装对象" tabindex="-1">原始类型和包装对象 <a class="header-anchor" href="#原始类型和包装对象" aria-label="Permalink to &quot;原始类型和包装对象&quot;">​</a></h2><ul><li>原始类型: 如<code>number</code>, <code>string</code>, <code>boolean</code>, 在<code>JS</code>中是简单数据类型, 它们在内存中占用空间少, 处理速度快</li><li>包装对象: 如<code>Number</code>对象, <code>String</code>对象, <code>Boolean</code>对象, 是复杂类型, 在内存中占用更多空间, 在实际开发中很少使用包装对象创建对象</li></ul><h3 id="自动装箱" tabindex="-1">自动装箱 <a class="header-anchor" href="#自动装箱" aria-label="Permalink to &quot;自动装箱&quot;">​</a></h3><blockquote><p><code>JS</code>在必要时会自动将原始类型包装成对象, 以便调用方法或者访问属性</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原始类型字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Halo World&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 当访问 str.length 时, JS 引擎做了以下工作</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1. 自动装箱，创建一个临时的 String 对象包装原始字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tempStringObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2. 访问 String 对象的 length 属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lengthValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tempStringObject.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 3. 销毁临时对象，返回长度值，JS引擎会自动处理对象销毁，开发中无感知</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lengthValue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre></div>`,13)]))}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
