import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.ko2zIC2c.js";const c=JSON.parse('{"title":"TypeScript 简介","description":"TypeScript简介","frontmatter":{"title":"TypeScript 简介","description":"TypeScript简介"},"headers":[],"relativePath":"docs/frontend/ts/core/01-introduction.md","filePath":"docs/frontend/ts/core/01-introduction.md","lastUpdated":1753693356000}'),n={name:"docs/frontend/ts/core/01-introduction.md"};function e(h,s,p,k,d,o){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="typescript-简介" tabindex="-1">TypeScript 简介 <a class="header-anchor" href="#typescript-简介" aria-label="Permalink to &quot;TypeScript 简介&quot;">​</a></h1><blockquote><p>以下将<code>TypeScript</code>简称为<code>TS</code>, <code>JavaScript</code>简称为<code>JS</code></p></blockquote><ol><li><code>TS</code>是由微软公司开发, 基于<code>JS</code>的一个扩展语言</li><li><code>TS</code>包含了<code>JS</code>的所有内容, 即: <code>TS</code>是<code>JS</code>的超集</li><li><code>TS</code>增加了: 静态类型检查, 接口, 泛型等很多现代开发特性, 因此更适合大型项目开发</li><li><code>TS</code>需要编译为<code>JS</code>, 然后交给浏览器或者其他<code>JS</code>运行环境执行</li></ol><h2 id="为何使用-ts" tabindex="-1">为何使用 TS <a class="header-anchor" href="#为何使用-ts" aria-label="Permalink to &quot;为何使用 TS&quot;">​</a></h2><h3 id="今非昔比的-js" tabindex="-1">今非昔比的 JS <a class="header-anchor" href="#今非昔比的-js" aria-label="Permalink to &quot;今非昔比的 JS&quot;">​</a></h3><ul><li>JS 诞生时的定位是浏览器<strong>脚本语言</strong>, 用于在网页中嵌入一些<strong>简单的逻辑</strong>, 而且代码量很少</li><li>随着时间的推移, JS 变得越来越流行, 如今的 JS 已经可以进行<strong>全栈编程</strong>了</li><li>现如今的 JS <strong>应用场景</strong>比以前<strong>丰富</strong>得多, <strong>代码量</strong>也比当年大很多, 随便一个 JS 项目的代码量, 可以轻松达到几万行甚至更多</li><li>然而 JS 当年<strong>出生简陋</strong>, 没考虑到如今的应用场景和代码量, 逐渐就出现<strong>很多困扰</strong></li></ul><h3 id="js-中的困扰" tabindex="-1">JS 中的困扰 <a class="header-anchor" href="#js-中的困扰" aria-label="Permalink to &quot;JS 中的困扰&quot;">​</a></h3><blockquote><p>以下<code>JS</code>代码放到<code>TS</code>文件中会之间爆红提示报错</p></blockquote><ul><li>不清不楚的数据类型</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> welcome </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">welcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 报错: TypeError: welcome is not a function</span></span></code></pre></div><ul><li>有漏洞的逻辑</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;奇数&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;偶数&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;奇数&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Halo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;偶数&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此条件永远不会成立</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>访问不存在的属性</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> area</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.weight </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不存在的属性</span></span></code></pre></div><ul><li>低级的拼写检查</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Halo World&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 没有拼写检查</span></span></code></pre></div><h3 id="静态类型检查" tabindex="-1">静态类型检查 <a class="header-anchor" href="#静态类型检查" aria-label="Permalink to &quot;静态类型检查&quot;">​</a></h3><ul><li>在代码运行前进行检查, 发现代码的错误或者不合理之处, 减少运行时异常出血的几率, 这种检查称为<strong>静态类型检查</strong>, <code>TS</code>的核心就是静态类型检查, 简而言之就是将运行时的错误前置</li><li>同样的功能, <code>TS</code>的代码量要大于<code>JS</code>, 但由于<code>TS</code>的代码结构更加清晰, 在后期代码的维护中<code>TS</code>远胜于<code>JS</code></li></ul>`,18)]))}const g=i(n,[["render",e]]);export{c as __pageData,g as default};
